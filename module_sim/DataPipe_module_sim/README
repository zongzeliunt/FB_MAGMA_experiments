***************************************
How to run:
	python3 *.py $mode $depth
	mode = 1: generate verilog code.
	mode = 2: run fault sim.
	mode = 3: run vcs sim.
	default depth = 16

	Or:
	make all: run vcs sim
	make verilog: generate verilog code.
	make fault: run fault sim.
	make vcs: run vcs sim.
	make clean: delete all generated files.




***************************************
Problem:
	Both VCS and fault clk initial status are low.
	In reset stage, I run 4 tester steps. So in real data write function, the initial clk status is low. 
	I add one tester step in DataPipe_test to write data at posedge.
	If run fault sim, I can expect data after depth cycles. But vcs sim needs depth + 1 cycles.

***************************************
Write at posedge will have these two behaviors:
	1) Write at posedge, use this code in DataPipe_test:
       This is in program DataPipe_write_posedge_pass_vcs.py
		#{{{
		tester.step(1)
		loop_count = 2	
		for i in range (0, depth * loop_count):
			tester.circuit.Din = base_write_data + i
			tester.circuit.VldIn = 1
				
			if i <= depth:
				tester.circuit.VldOut.expect(0)
			else:
				tester.circuit.VldOut.expect(1)
				tester.circuit.Dout.expect(base_write_data + i - depth - 1)
		#}}}
	   This means, wait the initial low clk, write at posedge, after {depth + 1} count of cycles (I use i <= depth), expect {base_write_data + i - depth - 1} data.
	   This method can pass VCS sim, but fail fault sim.
	
	2) Write at posedge, use this code in DataPipe_test:
       This is in program DataPipe_write_posedge_pass_vcs.py
		#{{{
		tester.step(1)
		loop_count = 2	
		for i in range (0, depth * loop_count):
			tester.circuit.Din = base_write_data + i
			tester.circuit.VldIn = 1
				
			if i < depth:
				tester.circuit.VldOut.expect(0)
			else:
				tester.circuit.VldOut.expect(1)
				tester.circuit.Dout.expect(base_write_data + i - depth)

			tester.step(2)
		#}}}
	   This method can pass fault sim, but fail vcs sim.
	   Only waited {depth} count of cycles (I use i < depth), expect {base_write_data + i - depth} data.

	3) Node:
	   Data {base_write_data + i - depth - 1} at cycle {depth + 1} is same as data {base_write_data + i - depth} at cycle {depth}.
***************************************
My guess:
	Internal signals are changing at clk posedge. If I write data at clk posedge, there could have a slight latency made vcs cannot detect the signal change edge at clk posedge. 
	Actually, vcs detected signal value at clk posedge are belonging to the last clk cycle. 

***************************************
Current solution:
	One unified solution is write data at negedge. Code is like this:
    This is in program DataPipe_write_negedge_pass_both.py
		#{{{
		loop_count = 2	
		for i in range (0, depth * loop_count):
			tester.circuit.Din = base_write_data + i
			tester.circuit.VldIn = 1
				
			if i < depth:
				tester.circuit.VldOut.expect(0)
			else:
				tester.circuit.VldOut.expect(1)
				tester.circuit.Dout.expect(base_write_data + i - depth)
		#}}}
	Do not use the initial tester step. This will write data at negedge. So, at posedge, the signal status will be stable. This solution can pass both fault sim and vcs sim.


***************************************
Nodes:
	I am not sure my solution is correct. I only write this tb for passing simulations. In real RTL design or my RTL level tb, I don't "expect" anything. My logic only respond when related signals have change. 
	As I can see, FIFO case and Pipeline case also have such problems.
		
